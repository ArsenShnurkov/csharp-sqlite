namespace Community.CsharpSqlite
{
    using System;
    
    using u8 = System.Byte;
    using i16 = System.Int16;
    using i64 = System.Int64;
    using u32 = System.UInt32;
    
    using sqlite3_value = Mem;
    
    /*
    ** Each database connection is an instance of the following structure.
    **
    ** The sqlite.lastRowid records the last insert rowid generated by an
    ** insert statement.  Inserts on views do not affect its value.  Each
    ** trigger has its own context, so that lastRowid can be updated inside
    ** triggers as usual.  The previous value will be restored once the trigger
    ** exits.  Upon entering a before or instead of trigger, lastRowid is no
    ** longer (since after version 2.8.12) reset to -1.
    **
    ** The sqlite.nChange does not count changes within triggers and keeps no
    ** context.  It is reset at start of sqlite3_exec.
    ** The sqlite.lsChange represents the number of changes made by the last
    ** insert, update, or delete statement.  It remains constant throughout the
    ** length of a statement and is then updated by OP_SetCounts.  It keeps a
    ** context stack just like lastRowid so that the count of changes
    ** within a trigger is not seen outside the trigger.  Changes to views do not
    ** affect the value of lsChange.
    ** The sqlite.csChange keeps track of the number of current changes (since
    ** the last statement) and is used to update sqlite_lsChange.
    **
    ** The member variables sqlite.errCode, sqlite.zErrMsg and sqlite.zErrMsg16
    ** store the most recent error code and, if applicable, string. The
    ** internal function sqlite3Error() is used to set these variables
    ** consistently.
    */
    public class sqlite3
    {
        public sqlite3_vfs pVfs;             /* OS Interface */
        public int nDb;                      /* Number of backends currently in use */
        public Db[] aDb = new Db[SQLITE_MAX_ATTACHED];         /* All backends */
        public int flags;                    /* Miscellaneous flags. See below */
        public int openFlags;                /* Flags passed to sqlite3_vfs.xOpen() */
        public int errCode;                  /* Most recent error code (SQLITE_) */
        public int errMask;                  /* & result codes with this before returning */
        public u8 autoCommit;                /* The auto-commit flag. */
        public u8 temp_store;                /* 1: file 2: memory 0: default */
        // Cannot happen under C#
        // public u8 mallocFailed;           /* True if we have seen a malloc failure */
        public u8 dfltLockMode;              /* Default locking-mode for attached dbs */
        public int nextAutovac;              /* Autovac setting after VACUUM if >=0 */
        public u8 suppressErr;               /* Do not issue error messages if true */
        public u8 vtabOnConflict;            /* Value to return for s3_vtab_on_conflict() */
        public int nextPagesize;             /* Pagesize after VACUUM if >0 */
        public int nTable;                   /* Number of tables in the database */
        public CollSeq pDfltColl;            /* The default collating sequence (BINARY) */
        public i64 lastRowid;                /* ROWID of most recent insert (see above) */
        public u32 magic;                    /* Magic number for detect library misuse */
        public int nChange;                  /* Value returned by sqlite3_changes() */
        public int nTotalChange;             /* Value returned by sqlite3_total_changes() */
        public sqlite3_mutex mutex;          /* Connection mutex */
        public int[] aLimit = new int[SQLITE_N_LIMIT];   /* Limits */
        public class sqlite3InitInfo
        {      /* Information used during initialization */
            public int iDb;                    /* When back is being initialized */
            public int newTnum;                /* Rootpage of table being initialized */
            public u8 busy;                    /* TRUE if currently initializing */
            public u8 orphanTrigger;           /* Last statement is orphaned TEMP trigger */
        };
        public sqlite3InitInfo init = new sqlite3InitInfo();
        public int nExtension;               /* Number of loaded extensions */
        public object[] aExtension;          /* Array of shared library handles */
        public Vdbe pVdbe;                   /* List of active virtual machines */
        public int activeVdbeCnt;            /* Number of VDBEs currently executing */
        public int writeVdbeCnt;             /* Number of active VDBEs that are writing */
        public int vdbeExecCnt;              /* Number of nested calls to VdbeExec() */
        public dxTrace xTrace;//)(void*,const char);        /* Trace function */
        public object pTraceArg;                          /* Argument to the trace function */
        public dxProfile xProfile;//)(void*,const char*,u64);  /* Profiling function */
        public object pProfileArg;                        /* Argument to profile function */
        public object pCommitArg;                 /* Argument to xCommitCallback() */
        public dxCommitCallback xCommitCallback;//)(void);    /* Invoked at every commit. */
        public object pRollbackArg;               /* Argument to xRollbackCallback() */
        public dxRollbackCallback xRollbackCallback;//)(void); /* Invoked at every commit. */
        public object pUpdateArg;
        public dxUpdateCallback xUpdateCallback;//)(void*,int, const char*,const char*,sqlite_int64);
        #if !SQLITE_OMIT_WAL
        //int (*xWalCallback)(void *, sqlite3 *, string , int);
        //void *pWalArg;
        #endif
        public dxCollNeeded xCollNeeded;//)(void*,sqlite3*,int eTextRep,const char);
        public dxCollNeeded xCollNeeded16;//)(void*,sqlite3*,int eTextRep,const void);
        public object pCollNeededArg;
        public sqlite3_value pErr;            /* Most recent error message */
        public string zErrMsg;                /* Most recent error message (UTF-8 encoded) */
        public string zErrMsg16;              /* Most recent error message (UTF-16 encoded) */
        public struct _u1
        {
            public bool isInterrupted;          /* True if sqlite3_interrupt has been called */
            public double notUsed1;            /* Spacer */
        }
        public _u1 u1;
        public Lookaside lookaside = new Lookaside();          /* Lookaside malloc configuration */
        #if !SQLITE_OMIT_AUTHORIZATION
        public dxAuth xAuth;//)(void*,int,const char*,const char*,const char*,const char);
        /* Access authorization function */
        public object pAuthArg;               /* 1st argument to the access auth function */
        #endif
        #if !SQLITE_OMIT_PROGRESS_CALLBACK
        public dxProgress xProgress;//)(void );  /* The progress callback */
        public object pProgressArg;               /* Argument to the progress callback */
        public int nProgressOps;                  /* Number of opcodes for progress callback */
        #endif
        #if !SQLITE_OMIT_VIRTUALTABLE
        public Hash aModule;                  /* populated by sqlite3_create_module() */
        public VtabCtx pVtabCtx;              /* Context for active vtab connect/create */
        public VTable[] aVTrans;              /* Virtual tables with open transactions */
        public int nVTrans;                   /* Allocated size of aVTrans */
        public VTable pDisconnect;            /* Disconnect these in next sqlite3_prepare() */
        #endif
        public FuncDefHash aFunc = new FuncDefHash();       /* Hash table of connection functions */
        public Hash aCollSeq = new Hash();                  /* All collating sequences */
        public BusyHandler busyHandler = new BusyHandler(); /* Busy callback */
        public int busyTimeout;                             /* Busy handler timeout, in msec */
        public Db[] aDbStatic = new Db[] { new Db(), new Db() };              /* Static space for the 2 default backends */
        public Savepoint pSavepoint;         /* List of active savepoints */
        public int nSavepoint;               /* Number of non-transaction savepoints */
        public int nStatement;               /* Number of nested statement-transactions  */
        public u8 isTransactionSavepoint;    /* True if the outermost savepoint is a TS */
        public i64 nDeferredCons;            /* Net deferred constraints this transaction. */
        public int pnBytesFreed;             /* If not NULL, increment this in DbFree() */
        #if SQLITE_ENABLE_UNLOCK_NOTIFY
        /* The following variables are all protected by the STATIC_MASTER
        ** mutex, not by sqlite3.mutex. They are used by code in notify.c.
        **
        ** When X.pUnlockConnection==Y, that means that X is waiting for Y to
        ** unlock so that it can proceed.
        **
        ** When X.pBlockingConnection==Y, that means that something that X tried
        ** tried to do recently failed with an SQLITE_LOCKED error due to locks
        ** held by Y.
        */
        sqlite3 *pBlockingConnection; /* Connection that caused SQLITE_LOCKED */
        sqlite3 *pUnlockConnection;           /* Connection to watch for unlock */
        void *pUnlockArg;                     /* Argument to xUnlockNotify */
        void (*xUnlockNotify)(void **, int);  /* Unlock notify callback */
        sqlite3 *pNextBlocked;        /* Next in list of all blocked connections */
        #endif
    };
    }

